//======================================================
// Source code generated by jvider v1.7 UNREGISTERED version.
// http://www.jvider.com/
//======================================================
package com.systemwerx.PassGen.obsolete;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.JPanel;
import javax.swing.BorderFactory;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import javax.swing.*;

import com.systemwerx.utils.trace;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
/**
 * @author  Administrator
 * @created August 25, 2004
 */
public class licenseManager extends JFrame implements ActionListener
{
static licenseManager thelicenseManager;

JPanel pnPanel0;

JPanel pnPanel1;
JTextArea taArea0;
JLabel lbLabel1;
JTextField tfText0;
JButton btBut0;
JButton btBut1;
JLabel lbLabel2;
Thread caller;
boolean traceActive = false;
trace tc;


/**
 */
public static void main( String args[] ) 
{
   try 
   {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
   }
   catch ( ClassNotFoundException e ) 
   {
   }
   catch ( InstantiationException e ) 
   {
   }
   catch ( IllegalAccessException e ) 
   {
   }
   catch ( UnsupportedLookAndFeelException e ) 
   {
   }
   thelicenseManager = new licenseManager(null);
} 

/**
 */
public licenseManager(Thread calledby) 
{
   super( "License Manager" );
   setTitle("License Manager");
   caller = calledby;
   if ( System.getProperty("sxdebug") != null )
   {
      traceActive = true;
      tc = new trace();
   }
   pnPanel0 = new JPanel();
   GridBagConstraints gbcPanel0 = new GridBagConstraints();

   pnPanel1 = new JPanel();
   pnPanel1.setBounds(0, 0, 373, 117);
   pnPanel1.setBorder( BorderFactory.createTitledBorder( "Licensed Products" ) );
   GridBagConstraints gbcPanel1 = new GridBagConstraints();
   gbcPanel0.insets = new Insets( 0,10,0,10 );

   taArea0 = new JTextArea(5,10);
   taArea0.setBounds(6, 20, 357, 90);
   gbcPanel1.gridx = 0;
   gbcPanel1.gridy = 0;
   gbcPanel1.gridwidth = 1;
   gbcPanel1.gridheight = 1;
   gbcPanel1.fill = GridBagConstraints.BOTH;
   gbcPanel1.weightx = 1;
   gbcPanel1.weighty = 1;
   gbcPanel1.anchor = GridBagConstraints.NORTH;
   pnPanel1.setLayout(null);
   pnPanel1.add( taArea0 );
   gbcPanel0.gridx = 0;
   gbcPanel0.gridy = 0;
   gbcPanel0.gridwidth = 6;
   gbcPanel0.gridheight = 1;
   gbcPanel0.fill = GridBagConstraints.BOTH;
   gbcPanel0.weightx = 1;
   gbcPanel0.weighty = 0;
   gbcPanel0.anchor = GridBagConstraints.NORTH;
   pnPanel0.setLayout(null);
   taArea0.setEditable(false);
   taArea0.setBorder(null);

   pnPanel0.add( pnPanel1 );
   

   lbLabel1 = new JLabel( "                               New License Key"  );
   lbLabel1.setHorizontalAlignment(SwingConstants.CENTER);
   lbLabel1.setBounds(50, 128, 173, 14);
   gbcPanel0.gridx = 1;
   gbcPanel0.gridy = 1;
   gbcPanel0.gridwidth = 2;
   gbcPanel0.gridheight = 1;
   gbcPanel0.fill = GridBagConstraints.BOTH;
   gbcPanel0.weightx = 1;
   gbcPanel0.weighty = 1;
   gbcPanel0.anchor = GridBagConstraints.CENTER;
   gbcPanel0.insets = new Insets( 10,0,10,0 );
   pnPanel0.add( lbLabel1 );

   tfText0 = new JTextField( );
   tfText0.addKeyListener(new KeyAdapter() {
   	@Override
   	public void keyTyped(KeyEvent arg0) {
		char a = arg0.getKeyChar();
		if ( a == '\n') btBut0.requestFocus();
   	}
   });
   tfText0.setBounds(60, 156, 240, 20);
   gbcPanel0.gridx = 1;
   gbcPanel0.gridy = 2;
   gbcPanel0.gridwidth = 5;
   gbcPanel0.gridheight = 1;
   gbcPanel0.fill = GridBagConstraints.BOTH;
   gbcPanel0.weightx = 1;
   gbcPanel0.weighty = 0;
   gbcPanel0.anchor = GridBagConstraints.NORTH;
   gbcPanel0.insets = new Insets( 0,10,10,10 );
   pnPanel0.add( tfText0 );

   btBut0 = new JButton( "OK"  );
   btBut0.setBounds(89, 215, 47, 23);
   gbcPanel0.gridx = 1;
   gbcPanel0.gridy = 3;
   gbcPanel0.gridwidth = 1;
   gbcPanel0.gridheight = 1;
   gbcPanel0.fill = GridBagConstraints.BOTH;
   gbcPanel0.weightx = 1;
   gbcPanel0.weighty = 0;
   gbcPanel0.anchor = GridBagConstraints.NORTH;
   gbcPanel0.insets = new Insets( 10,15,0,15 );
   pnPanel0.add( btBut0 );
   btBut0.addActionListener(this);

   btBut1 = new JButton( "Cancel"  );
   btBut1.setBounds(213, 215, 65, 23);
   gbcPanel0.gridx = 2;
   gbcPanel0.gridy = 3;
   gbcPanel0.gridwidth = 1;
   gbcPanel0.gridheight = 1;
   gbcPanel0.fill = GridBagConstraints.BOTH;
   gbcPanel0.weightx = 1;
   gbcPanel0.weighty = 0;
   gbcPanel0.anchor = GridBagConstraints.NORTH;
   gbcPanel0.insets = new Insets( 10,15,0,15 );
   pnPanel0.add( btBut1 );
   btBut1.addActionListener(this);

   lbLabel2 = new JLabel( "                                                                                      "  );
   lbLabel2.setBounds(383, 51, 258, 14);
   gbcPanel0.gridx = 0;
   gbcPanel0.gridy = 4;
   gbcPanel0.gridwidth = 7;
   gbcPanel0.gridheight = 1;
   gbcPanel0.fill = GridBagConstraints.BOTH;
   gbcPanel0.weightx = 1;
   gbcPanel0.weighty = 1;
   gbcPanel0.anchor = GridBagConstraints.NORTH;
   pnPanel0.add( lbLabel2 );

//   setDefaultCloseOperation( EXIT_ON_CLOSE );

   setContentPane( pnPanel0 );
   setSize(new Dimension(395, 304));

   //pack();
   JFrame window = this;
   Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
   Dimension windowSize = window.getSize();
   window.setLocation(Math.max(0,(screenSize.width -windowSize.width)/2), 
                   Math.max(0,(screenSize.height-windowSize.height)/2));
   setVisible( true );
   loadLicense();
   addWindowListener(new java.awt.event.WindowAdapter() {
    public void windowClosing(java.awt.event.WindowEvent e) {
        // Perhaps do something before the terminating.
		if ( caller != null )
	    {
	       synchronized ( caller )
           {
              caller.notify();
           }
        }
        dispose();
    }
  });
} 
   public void actionPerformed(ActionEvent e) 
   {
	   if ( e.getActionCommand().equals("OK"))
	      {
		      if ( tfText0.getText().length() == 0 )
		         return;
		         
		      if (storeLicense(tfText0.getText()))
		      {
                 loadLicense();
	          }
	          tfText0.setText("");
	          return;
	      }
	   if ( e.getActionCommand().equals("Cancel"))
	      {
		      dispose();
      			if ( caller != null )
			    {
    		       synchronized ( caller )
		           {
		              caller.notify();
	               }
                }
	          return;
	      }
   }

      
   boolean displayErrorMessage(String Text)
   {
       JOptionPane opt = new JOptionPane();
       //custom title, error icon
                        opt.showMessageDialog(this,
                        Text,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
	   
	   return true;
   }

   boolean displayInfoMessage(String Text)
   {
       JOptionPane opt = new JOptionPane();
       //custom title, error icon
                        opt.showMessageDialog(this,
                        Text,
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE);
	   
	   return true;
   }
   
   boolean storeLicense(String Key)
   {
	 try
	 {  
	   /*String licenseFile;	 
	   if ( (licenseFile = System.getProperty(""Exception detected - "n detected - "")) == null )
       {
	       licenseFile = "license.dat";
       }
       else
       {
          if ( traceActive ) tc.traceMessage("License file selected : "+licenseFile);
       }*/
	   license lic = new license();
      String licenseFile = null;
	   File out = new File(licenseFile);
	   FileOutputStream fos = new FileOutputStream(licenseFile);
	   ObjectOutputStream oos = new ObjectOutputStream(fos);
	   
	   
	   if (Key.length() != 48)
	   {
		   displayErrorMessage("License is invalid - length is incorrect");
		   return false;
	   }
	   
       if ( lic.verifyLicense(Key.substring(0,4),Key.substring(4,8),"1234567812345678",Key.substring(8)) )
        {
          displayInfoMessage("License is valid - expires "+lic.getExpireDateString(Key.substring(0,4)));
          oos.writeUTF(Key);
          oos.close();
          return true;
        }
        else
        {
	        displayErrorMessage("License is not valid");
	        return false;
        }
     }
     catch (Exception ex)
     {
        System.out.println("Exception detected - "+ex.getMessage());
        System.out.println("Exception detected - "+ex.getClass().getName());
        ex.printStackTrace();
     }
     return true;
   }
   
   boolean loadLicense()
   {
	 String licenseFile;  
     Calendar expireDate;
	 try
	 {  
	   if ( (licenseFile = System.getProperty("e3license")) == null )
       {
	       licenseFile = "license.dat";
       }
       else
       {
          if ( traceActive ) tc.traceMessage("License file selected : "+licenseFile);
       }
	   license lic = new license();
	   File in = new File(licenseFile);
	   FileInputStream fis = new FileInputStream(licenseFile);
	   ObjectInputStream ois = new ObjectInputStream(fis);
	   String Key = null;
	   Key = ois.readUTF();
       if ( traceActive ) tc.traceMessage("License : "+Key);
	   
       if ( lic.verifyLicense(Key.substring(0,4),Key.substring(4,8),"1234567812345678",Key.substring(8)) )
        {
          taArea0.setText("PassGen for Java - expires "+lic.getExpireDateString(Key.substring(0,4)));
          return true;
        }
        else
        {
	        expireDate = lic.getExpireCalendar(Key.substring(0,4));
	        if ( lic.isAfterExpiry(expireDate))
	        {
	           taArea0.setText("PassGen for Java - expired "+lic.getExpireDateString(Key.substring(0,4)));
            }
            else
            {
	           taArea0.setText("PassGen for Java - expires "+lic.getExpireDateString(Key.substring(0,4))+"\n license is invalid \n( Key may not be valid for this system)");
            }
	        return false;
        }
    }
     catch ( java.io.FileNotFoundException ex )
     {
	       return false;
     }
     
     catch (java.io.EOFException ex)
     {
        return false;
     }
     catch (Exception ex)
     {
        System.out.println("Exception detected - "+ex.getMessage());
        System.out.println("Exception detected - "+ex.getClass().getName());
        ex.printStackTrace();
        return false;
     }
     
   }
   
   
} 
